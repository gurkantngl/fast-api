import streamlit as st
import requests
from datetime import datetime

# API URL'si
API_URL = "http://localhost:8000"

st.set_page_config(
    page_title="K√ºt√ºphane Y√∂netim Sistemi",
    page_icon="üìö",
    layout="wide"
)

st.title("üìö K√ºt√ºphane Y√∂netim Sistemi")

# Sidebar men√ºs√º
menu = st.sidebar.selectbox(
    "Men√º",
    ["Ana Sayfa", "Kitaplar", "Kategoriler", "√ñd√ºn√ß ƒ∞≈ülemleri"]
)

if menu == "Ana Sayfa":
    st.header("Ho≈ü Geldiniz!")
    st.write("""
    Bu uygulama ile k√ºt√ºphanenizi kolayca y√∂netebilirsiniz.
    
    ### √ñzellikler:
    - üìñ Kitap ekleme, d√ºzenleme ve silme
    - üìë Kategori y√∂netimi
    - üìå Kitap √∂d√ºn√ß alma ve iade etme
    - üîç Kategoriye g√∂re kitap filtreleme
    """)

elif menu == "Kitaplar":
    st.header("Kitap Y√∂netimi")
    
    tab1, tab2 = st.tabs(["Kitap Listesi", "Yeni Kitap Ekle"])
    
    with tab1:
        # Kategori filtresi
        try:
            categories = requests.get(f"{API_URL}/categories/").json()
            category_filter = st.selectbox(
                "Kategoriye G√∂re Filtrele",
                ["T√ºm√º"] + [cat["name"] for cat in categories]
            )
            
            # Kitaplarƒ± listele
            if category_filter == "T√ºm√º":
                books = requests.get(f"{API_URL}/books/").json()
            else:
                selected_category = next(cat for cat in categories if cat["name"] == category_filter)
                books = requests.get(f"{API_URL}/books/?category_id={selected_category['id']}").json()
            
            for book in books:
                with st.expander(f"{book['title']} - {book['author']}"):
                    col1, col2 = st.columns(2)
                    with col1:
                        st.write(f"**ISBN:** {book['isbn']}")
                        st.write(f"**Yayƒ±n Yƒ±lƒ±:** {book['publication_year']}")
                    with col2:
                        st.write(f"**Durum:** {'M√ºsait' if book['available'] else '√ñd√ºn√ß Verilmi≈ü'}")
                        if st.button("Sil", key=f"delete_{book['id']}"):
                            response = requests.delete(f"{API_URL}/books/{book['id']}")
                            if response.status_code == 200:
                                st.success("Kitap ba≈üarƒ±yla silindi!")
                                st.rerun()
                            
        except Exception as e:
            st.error(f"Kitaplar y√ºklenirken bir hata olu≈ütu: {str(e)}")
    
    with tab2:
        try:
            categories = requests.get(f"{API_URL}/categories/").json()
            with st.form("new_book_form"):
                title = st.text_input("Kitap Adƒ±")
                author = st.text_input("Yazar")
                isbn = st.text_input("ISBN")
                publication_year = st.number_input("Yayƒ±n Yƒ±lƒ±", min_value=1000, max_value=datetime.now().year)
                category_id = st.selectbox(
                    "Kategori",
                    options=[cat["id"] for cat in categories],
                    format_func=lambda x: next(cat["name"] for cat in categories if cat["id"] == x)
                )
                
                if st.form_submit_button("Kitap Ekle"):
                    response = requests.post(
                        f"{API_URL}/books/",
                        json={
                            "title": title,
                            "author": author,
                            "isbn": isbn,
                            "publication_year": publication_year,
                            "category_id": category_id
                        }
                    )
                    if response.status_code == 200:
                        st.success("Kitap ba≈üarƒ±yla eklendi!")
                    else:
                        st.error("Kitap eklenirken bir hata olu≈ütu!")
        except Exception as e:
            st.error(f"Bir hata olu≈ütu: {str(e)}")

elif menu == "Kategoriler":
    st.header("Kategori Y√∂netimi")
    
    tab1, tab2 = st.tabs(["Kategori Listesi", "Yeni Kategori Ekle"])
    
    with tab1:
        try:
            categories = requests.get(f"{API_URL}/categories/").json()
            for category in categories:
                with st.expander(category["name"]):
                    st.write(f"**A√ßƒ±klama:** {category['description']}")
        except Exception as e:
            st.error(f"Kategoriler y√ºklenirken bir hata olu≈ütu: {str(e)}")
    
    with tab2:
        with st.form("new_category_form"):
            name = st.text_input("Kategori Adƒ±")
            description = st.text_area("A√ßƒ±klama")
            
            if st.form_submit_button("Kategori Ekle"):
                response = requests.post(
                    f"{API_URL}/categories/",
                    json={
                        "name": name,
                        "description": description
                    }
                )
                if response.status_code == 200:
                    st.success("Kategori ba≈üarƒ±yla eklendi!")
                else:
                    st.error("Kategori eklenirken bir hata olu≈ütu!")

elif menu == "√ñd√ºn√ß ƒ∞≈ülemleri":
    st.header("√ñd√ºn√ß ƒ∞≈ülemleri")
    
    tab1, tab2, tab3 = st.tabs(["√ñd√ºn√ß Al", "ƒ∞ade Et", "√ñd√ºn√ß Kayƒ±tlarƒ±"])
    
    with tab1:
        try:
            books = requests.get(f"{API_URL}/books/").json()
            available_books = [book for book in books if book["available"]]
            
            with st.form("loan_form"):
                book_id = st.selectbox(
                    "Kitap",
                    options=[book["id"] for book in available_books],
                    format_func=lambda x: next(book["title"] for book in available_books if book["id"] == x)
                )
                borrower_name = st.text_input("√ñd√ºn√ß Alan Ki≈üi")
                
                if st.form_submit_button("√ñd√ºn√ß Ver"):
                    response = requests.post(
                        f"{API_URL}/loans/",
                        json={
                            "book_id": book_id,
                            "borrower_name": borrower_name
                        }
                    )
                    if response.status_code == 200:
                        st.success("Kitap ba≈üarƒ±yla √∂d√ºn√ß verildi!")
                    else:
                        st.error("√ñd√ºn√ß verme i≈ülemi ba≈üarƒ±sƒ±z oldu!")
        except Exception as e:
            st.error(f"Bir hata olu≈ütu: {str(e)}")
    
    with tab2:
        try:
            loans = requests.get(f"{API_URL}/loans/").json()
            active_loans = [loan for loan in loans if not loan["is_returned"]]
            
            if active_loans:
                for loan in active_loans:
                    book = requests.get(f"{API_URL}/books/{loan['book_id']}").json()
                    with st.expander(f"{book['title']} - {loan['borrower_name']}"):
                        st.write(f"√ñd√ºn√ß Alma Tarihi: {loan['loan_date']}")
                        if st.button("ƒ∞ade Et", key=f"return_{loan['id']}"):
                            response = requests.put(f"{API_URL}/loans/{loan['id']}/return")
                            if response.status_code == 200:
                                st.success("Kitap ba≈üarƒ±yla iade edildi!")
                                st.rerun()
            else:
                st.info("ƒ∞ade edilmemi≈ü √∂d√ºn√ß kayƒ±t bulunmamaktadƒ±r.")
        except Exception as e:
            st.error(f"Bir hata olu≈ütu: {str(e)}")
    
    with tab3:
        try:
            loans = requests.get(f"{API_URL}/loans/").json()
            for loan in loans:
                book = requests.get(f"{API_URL}/books/{loan['book_id']}").json()
                with st.expander(f"{book['title']} - {loan['borrower_name']}"):
                    st.write(f"**√ñd√ºn√ß Alma Tarihi:** {loan['loan_date']}")
                    st.write(f"**ƒ∞ade Tarihi:** {loan['return_date'] if loan['return_date'] else 'ƒ∞ade Edilmemi≈ü'}")
                    st.write(f"**Durum:** {'ƒ∞ade Edildi' if loan['is_returned'] else '√ñd√ºn√ß Verilmi≈ü'}")
        except Exception as e:
            st.error(f"Bir hata olu≈ütu: {str(e)}") 